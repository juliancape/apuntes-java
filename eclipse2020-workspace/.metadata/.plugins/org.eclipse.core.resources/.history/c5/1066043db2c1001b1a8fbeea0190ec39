package ejercicio1;


import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.stream.Collectors;


public class AppDomicilios {

	private ArrayList<Domiciliario> listDomiciliarios;
	private Queue<Reparto> colaReparto;
	private Queue<Domicilio> colaDomicilio;
	private Scanner leerDato= new Scanner(System.in);
	
	
	
	/**
	 * @param listDomiciliarios
	 * @param colaReparto
	 * @param colaDomicilio
	 */
	public AppDomicilios() {
		super();
		this.listDomiciliarios = new ArrayList<Domiciliario>();
		this.colaReparto = new LinkedList<>();
		this.colaDomicilio = new LinkedList<>();
	}


	public Object nuevoDomiciliario() {
		
		System.out.println("Ingrese Identificacion ");
		int id= leerDato.nextInt();
		System.out.println("Ingrese Nombre ");
		String nombre= leerDato.next();
		System.out.println("Ingrese Apellido");
		String apellido= leerDato.next();
		System.out.println("Ingrese Año de Nacimiento");
		int fNacimiento= leerDato.nextInt();
		System.out.println("Ingrese Nacionalidad");
		String nacionalidad=  leerDato.next();
		
		System.out.println("Ingrese UPZ \nLas siguientes upz estan ocupadas y no se pueden repetir");
		int[] upzOcupadas= listDomiciliarios.stream().mapToInt(p->p.getUpz()).toArray();
		for (int i : upzOcupadas) {
			System.out.print("["+i+"]  ");
		}
		int upz=leerDato.nextInt();
		for (int i = 0; i < upzOcupadas.length; i++) {
			if (upz==upzOcupadas[i]) {
			System.out.println("ERROR. Escriba nuevamente los datos");
			return nuevoDomiciliario();
			
		}
		}
		
		
		int[] entregas= {0,0,0,0,0,0,0};
		long devengado=0;
		long valorPagado=0;
		
		listDomiciliarios.add(new Domiciliario(id, nombre, apellido, fNacimiento, nacionalidad
				, entregas, devengado, valorPagado, upz));
		
		
		
		for (Domiciliario domiciliario : listDomiciliarios) {
			int[] a= {2,3,3,3,3,3,3};
			
			a=domiciliario.setEntregas(a);
			listDomiciliarios.forEach(System.out::println);
			break;
		}
		
		listDomiciliarios.forEach(System.out::println);
		return 0;
	}
	
	
	
	
	public  List<Domiciliario> importarListaDomiciliarios(String fileName) {
	//List<Domiciliario> listaD= new ArrayList<Domiciliario>();
	
	int[] dias= new int[] {0,0,0,0,0,0,0};
	
	
	try {
		listDomiciliarios= (ArrayList<Domiciliario>) Files.lines(Paths.get(fileName))
				.map(l-> new Domiciliario(Integer.parseInt(l.split(";")[0]),
						l.split(";")[1], l.split(";")[2],
						Integer.parseInt(l.split(";")[3]),
						l.split(";")[4],dias, Long.parseLong(l.split(";")[5]),
						Long.parseLong(l.split(";")[6]), 
						Integer.parseInt(l.split(";")[7])))
						.collect(Collectors.toList());
	} catch (Exception e) {
		System.out.println("F");
	}
	
//	Comparator<Domiciliario> id=(p1,p2)->Integer.compare(p1.getId(), p2.getId());
//	listDomiciliarios.stream().sorted(id).forEach(System.out::println);
	listDomiciliarios.forEach(System.out::println);
	return listDomiciliarios;
	
}


	public void agregarRepartos() {
		System.out.println("Referencia");
		int nReparto=leerDato.nextInt();
		System.out.println("UPZ");
		int upz= leerDato.nextInt();
		System.out.println("Descripcion del producto");
		String descripcion=leerDato.next();
		String datosCliente= leerDato.next();
		
		colaReparto.add(new Reparto(nReparto, descripcion, datosCliente, upz));
		
		
	}
	
	
	public Queue<Reparto> asignarReparto() {
					
					int cantidad=colaReparto.size();
					for (int i = 0; i < cantidad; i++) {
						if (listDomiciliarios.stream().anyMatch(p->p.getUpz()==colaReparto.peek().getUpz())) {
							int id=0;
							for (Domiciliario domiciliario : listDomiciliarios) {
								if (domiciliario.getUpz()==colaReparto.peek().getUpz()) {
									id=domiciliario.getId();
								}
							}
						
						colaDomicilio.add(new Domicilio(id
								, new Reparto(colaReparto.peek().getnReparto(),
								colaReparto.peek().getDescripcion(), colaReparto.peek().getDatosCliente(),
								colaReparto.peek().getUpz()), false, (int) ((Math.random()*(1 -8))+8)));
						colaReparto.poll();
					}
						else {
							System.out.println("Lo sentimos, no hay cobertura de domicilios para la UPZ "
									+ colaReparto.peek().getUpz()+".   DOMICILIO CANCELADO");
						}
					}
					
					
					colaDomicilio.forEach(System.out::println);
			
					return colaReparto;
			}
			
	
	
		
		
		
		
		
	
	
	public void agregarRepartosRapido() {
			
		colaReparto.add(new Reparto(111, "carro", "Juan", 2));
		colaReparto.add(new Reparto(333, "camiseta", "Julian", 1));
		colaReparto.add(new Reparto(444, "pc", "Jennifer", 4));
		colaReparto.forEach(System.out::println);
		
		
	}
	

	
}
